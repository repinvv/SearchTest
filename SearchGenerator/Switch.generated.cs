//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace SearchGenerator
{
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class Switch
    {
        #region constructor
        Flag[] flags;

        public Switch(Flag[] flags)
        {
            this.flags = flags;
        }
        #endregion

        #region basic members
        private readonly StringBuilder sb = new StringBuilder();
        private string executed;

        private void WriteLiteral(string text)
        {
            if (!string.IsNullOrEmpty(text))
            {
                sb.Append(text);
            }
        }

        private void Write(object value)
        {
            if (value != null)
            {
                sb.Append(value);
            }
        }

        public override string ToString()
        {
            return executed;
        }
        #endregion

        public string Execute()
        {
            WriteLiteral(@"namespace SearchTest.Search.GeneratedSolution");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"{");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using Search.NaiveSolution;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using System;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    public static class Switch");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public static IMatcher GetMatcher(SearchCriteria criteria)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            int matcherId = 0;");
            WriteLiteral(Environment.NewLine);
            int flagVal = 1;
            foreach (var flag in flags)
            {
                WriteLiteral(@"            if(criteria.");
                Write(flag.Name);
                WriteLiteral(@")");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"            {");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"                matcherId += ");
                Write(flagVal);
                WriteLiteral(@";");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"            ");
                WriteLiteral(@"}");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(Environment.NewLine);
                 flagVal *= 2; 
            }
            WriteLiteral(@"            switch(matcherId)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            {");
            WriteLiteral(Environment.NewLine);
            for (int i = (int)Math.Pow(2, flags.Length) - 1; i >=0; i--)
            {
                WriteLiteral(@"                case ");
                Write(i);
                WriteLiteral(@":");
                WriteLiteral(Environment.NewLine);
                WriteLiteral(@"                    return new GenMatcher");
                Write(i);
                WriteLiteral(@"(criteria);");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(@"                default: ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                    throw new Exception(""should never happen"");");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"}");
            WriteLiteral(Environment.NewLine);

            return executed = sb.ToString();
        }
    }
}
