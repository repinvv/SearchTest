//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace SearchGenerator
{
    using System;
    using System.Text;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("SharpRazor", "1.0.0.0")]
    internal class Search
    {
        #region constructor
        Flag[] flags;
        int i;

        public Search(Flag[] flags, int i)
        {
            this.flags = flags;
            this.i = i;
        }
        #endregion

        #region basic members
        private readonly StringBuilder sb = new StringBuilder();
        private string executed;

        private void WriteLiteral(string text)
        {
            if (!string.IsNullOrEmpty(text))
            {
                sb.Append(text);
            }
        }

        private void Write(object value)
        {
            if (value != null)
            {
                sb.Append(value);
            }
        }

        public override string ToString()
        {
            return executed;
        }
        #endregion

        public string Execute()
        {
            WriteLiteral(@"namespace SearchTest.Search.GeneratedSolution");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"{");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    using Search.NaiveSolution;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    public static class Search");
            Write(i);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        public static SearchResult Search(Post[] index)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            int count = 0;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            Post[] results = new Post[50];");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            for (int i = 0; i < index.Length; i++)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            {");
            WriteLiteral(Environment.NewLine);
            foreach (var flag in flags)
            {
                WriteLiteral(@"                if(index[i].");
                Write(flag.Condition);
                WriteLiteral(@") continue;");
                WriteLiteral(Environment.NewLine);
            }
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                count++;");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                if (count <= results.Length)");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                {");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                    results[count - 1] = index[i];");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"                }                ");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"            return new SearchResult {Count = count, Posts = results};");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"        }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"    }");
            WriteLiteral(Environment.NewLine);
            WriteLiteral(@"}");
            WriteLiteral(Environment.NewLine);

            return executed = sb.ToString();
        }
    }
}
